import React from 'react';
import { renderToString } from 'react-dom/server';
import { StaticRouter } from 'react-router-dom';
import { ServerStyleSheets, ThemeProvider } from '@material-ui/core/styles';
import serialize from 'serialize-javascript';
import { createStore } from 'redux';
import { Provider } from 'react-redux';
import { ChunkExtractor } from '@loadable/server';
import App from '../../client/components/App';
import blogApp from '../../reducers';
import theme from '../../theme';

const path = require('path');

const renderFullPage = (app, css, preloadedState, scriptTags) => `
<!doctype html>
<html lang="en">

  <head>
    <meta charset="UTF-8">
    <meta
      name="viewport"
      content="minimum-scale=1, initial-scale=1, width=device-width"
    />
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Bloggo</title>
    <style id="jss-server-side">${css}</style>
  </head>

  <body>
    <div id="root">${app}</div>
    <script>
      // WARNING: See the following for security issues around embedding JSON in HTML:
      // https://redux.js.org/recipes/server-rendering/#security-considerations
      window.__PRELOADED_STATE__ = ${serialize(preloadedState)}
    </script>
    ${scriptTags}
  </body>

</html>
`;

const render = (req, res, store) => {
  const context = {};
  const sheets = new ServerStyleSheets();
  // This is the stats file generated by webpack loadable plugin
  const statsFile = path.join(__dirname, '..', '..', '..', 'dist', 'loadable-stats.json');
  // const statsFile = path.resolve('dist/loadable-stats.json');
  // We create an extractor from the statsFile
  const extractor = new ChunkExtractor({ statsFile, entrypoints: ['client'] });
  // Wrap your application using "collectChunks"
  const jsx = extractor.collectChunks(sheets.collect(
    <Provider store={store}>
      <StaticRouter location={req.url} context={context}>
        <ThemeProvider theme={theme}>
          <App />
        </ThemeProvider>
      </StaticRouter>
    </Provider>
  ));
  const html = renderToString(jsx);
  const scriptTags = extractor.getScriptTags();

  // if (context.url) {
  //   // Somewhere a `<Redirect>` was rendered
  //   console.log('Found a redirect to:', context.url);
  //   return res.redirect(301, context.url);
  // }
  // we're good, send the response

  // Grab the CSS from the sheets.
  const css = sheets.toString();

  const finalState = store.getState();

  // console.log('preloaded state:', finalState);

  return res.send(renderFullPage(html, css, finalState, scriptTags));
};

export const router = (req, res) => {
  console.log('rendering', req.url, 'from server');

  const store = createStore(blogApp);
  render(req, res, store);
};

export const renderWithState = (req, res, preloadedState) => {
  console.log('rendering', req.url, 'from server');
  const store = createStore(blogApp, preloadedState);
  render(req, res, store);
};
